-- JOINS (Two Way to write Join query) :-
-- #1. Using join keyword between tables in from clause.

	SELECT T1.COLUMN1 AS C1, T1.COLUMNS2 AS C2, T2.COLUMN3 AS C3
	FROM TABLE1 T1
	JOIN TABLE2 AS T2 ON T1.COLUMN1 = T2.COLUMN1 AND T1.COLUMN2 = T2.COLUMN2;
    
-- #2. Using comma "," between tables in from clause.
SELECT T1.COLUMN1 AS C1, T1.COLUMN2 AS C2, T2.COLUMN3 AS C3
FROM TABLE1 AS T1, TABLE2 AS T2
WHERE T1.C1 = T2.C2
AND T1.C1 = T2.C2;    -- Both the conditions should satisfy for the query to featch data

												-- QUESTION -01 :-

-- fetch all the class name where Music is thought as a subject
SELECT * FROM classes;
SELECT * FROM subjects;

SELECT CLASS_NAME FROM CLASSES CLS
JOIN SUBJECTS SUB ON SUB.SUBJECT_ID = CLS.SUBJECT_ID
WHERE SUB.SUBJECT_NAME = 'Music';
# IF WE WRITE A QUERY IN SUCH MANNER THEN THE COLUMN WHICH WE HAVE WRITTEN FIRST WILL APPEAR FROM 0 INDEX WHILE TABLE2 COLUMNS WILL APPEND AFTER IT.
SELECT * FROM SUBJECTS SUB
JOIN CLASSES CLS ON SUB.SUBJECT_ID = CLS.SUBJECT_ID
WHERE SUB.SUBJECT_NAME = 'Music';
# IF WE WRITE A QUERY IN SUCH MANNER THEN THE COLUMN WHICH WE HAVE WRITTEN FIRST WILL APPEAR FROM 0 INDEX WHILE TABLE2 COLUMNS WILL APPEND AFTER IT.


												-- QUESTION -02 :-

-- FETCH THE NAME OF STAFF WHO TEACHES MATHAMETICS:- 
SELECT * FROM CLASSES;
SELECT * FROM SUBJECTS;
SELECT * FROM STAFF; 

SELECT DISTINCT TEACHER_ID FROM CLASSES CLS
JOIN SUBJECTS SUB ON SUB.SUBJECT_ID = CLS.SUBJECT_ID
WHERE SUB.SUBJECT_NAME = 'Mathematics';
-- using this query we got teacher_id of teacher who use to teach mathematics

SELECT  FIRST_NAME, LAST_NAME, SUBJECT_ID FROM CLASSES CLS
JOIN STAFF STF ON CLS.TEACHER_ID = STF.STAFF_ID;
-- using this we get name of teacher and there subjects

SELECT SUBJECT_NAME, FIRST_NAME, LAST_NAME FROM CLASSES CLS
JOIN SUBJECTS SUB ON SUB.SUBJECT_ID = CLS.SUBJECT_ID
JOIN STAFF STF ON CLS.TEACHER_ID = STF.STAFF_ID;
-- using this query we get full name of teacher with there subject name

# THEREFORE, FINAL QUERY :-
SELECT DISTINCT FIRST_NAME , LAST_NAME FROM CLASSES CLS
JOIN SUBJECTS SUB ON CLS.SUBJECT_ID = SUB.SUBJECT_ID
JOIN STAFF STF ON STF.STAFF_ID = CLS.TEACHER_ID
WHERE SUB.SUBJECT_NAME = 'Mathematics';

SELECT  DISTINCT CONCAT(STF.FIRST_NAME, ' ', STF.LAST_NAME) AS FULL_NAME FROM SUBJECTS SUB
JOIN CLASSES CLS ON CLS.SUBJECT_ID = SUB.SUBJECT_ID
JOIN STAFF STF ON STF.STAFF_ID = CLS.TEACHER_ID
WHERE SUB.SUBJECT_NAME = 'Mathematics';



												-- QUESTION -02 :-
-- FETCH ALL STAFF WHO TEACH GRADE 8, 9, 10, AND ALSO FETCH ALL THE NON-TEACHING STAFF

SELECT * FROM STAFF;  
SELECT * FROM CLASSES ;        

-- FETCHING ALL STAFF WHO TEACH GRADE 8, 9, 10.
	SELECT DISTINCT
		CONCAT(STF.FIRST_NAME, " ",STF.LAST_NAME),
		CLASS_NAME FROM CLASSES CLS
	JOIN STAFF STF ON CLS.TEACHER_ID = STF.STAFF_ID
	WHERE CLASS_NAME IN('Grade 8','Grade 9','Grade 10');
-- from this we get full name of teacher who teaches to grade 8 or 9 or 10 with the grade they use to teach
-- ADDING ONE MORE COLUMN :-
	SELECT DISTINCT 
		CONCAT(STF.FIRST_NAME, ' ', STF.LAST_NAME) AS FULL_NAME,
		CASE 
			WHEN STF.STAFF_TYPE = 'Teaching' THEN 'Teaches 8 or 9 or 10'
			ELSE STF.STAFF_TYPE
		END AS TYPE
	FROM CLASSES CLS
	JOIN STAFF STF ON STF.STAFF_ID = CLS.TEACHER_ID;


# THEREFORE, RESULT
	SELECT DISTINCT  CONCAT(STF.FIRST_NAME, " ",STF.LAST_NAME) AS TEACHERS FROM CLASSES CLS
	JOIN STAFF STF ON CLS.TEACHER_ID = STF.STAFF_ID
	WHERE CLASS_NAME IN('Grade 8','Grade 9','Grade 10');
-- from this we get the full name of teacher who teaches to grade 8, 9, 10


-- FETCH ALL THE NON-TEACHING STAFF
	SELECT DISTINCT  CONCAT(FIRST_NAME, " ",LAST_NAME) FROM STAFF WHERE STAFF_TYPE = 'Non-Teaching';
-- from this we get the full name of all non teaching staff 

-- GETTING UNION OF BOTH
	SELECT DISTINCT  
		CONCAT(STF.FIRST_NAME, " ",STF.LAST_NAME) AS FULL_NAME,
		CASE
			WHEN STF.STAFF_TYPE = 'Teaching' THEN 'Teaches 8 or 9 or 10'
			ELSE STF.STAFF_TYPE
		END AS TYPE    
	FROM CLASSES CLS
	JOIN STAFF STF ON CLS.TEACHER_ID = STF.STAFF_ID
	WHERE CLASS_NAME IN('Grade 8','Grade 9','Grade 10')
	union
	SELECT DISTINCT  CONCAT(FIRST_NAME, " ",LAST_NAME), STAFF_TYPE FROM STAFF WHERE STAFF_TYPE = 'Non-Teaching';


												-- QUESTION -03 :-		USING GROUPBY
-- 1. COUNT NUMBER OF STUDENTS IN EACH CLASS
SELECT * FROM STUDENT_CLASSES;                 
-- -----------------------------------------
	SELECT CLASS_ID, COUNT(1)
	FROM STUDENT_CLASSES SC
	GROUP BY SC.CLASS_ID;                             
-- -----------------------------------------          

-- 2.  MORE THAN 100 STUDENT IN EACH CLASS
-- -----------------------------------------
SELECT CLASS_ID, COUNT(1)
FROM STUDENT_CLASSES SC 
GROUP BY CLASS_ID
HAVING COUNT(1) >= 100;
-- -----------------------------------------

-- 3. PARENT WITH MORE THAN 1 CHILDERN
-- -----------------------------------------
SELECT * FROM STUDENT_PARENT;
SELECT PARENT_ID, COUNT(1)
FROM STUDENT_PARENT SP
GROUP BY SP.PARENT_ID
HAVING COUNT(1) > 1;


# SUBQUEURY : QUERY WRITTEN INSIDE A QUERY :-
-- FETCH THE DETAILS OF PARENTS HAVING MORE THA 1 KIDS GOING TO THIS SCHOOL :-

SELECT CONCAT(P.FIRST_NAME||" "||P.LAST_NAME) AS PARENT_NAME,
		
        CONCAT(S.FIRST_NAME||" "||S.LAST_NAME) AS STUDENT_NAME,
        S.AGE AS STUDENT_AGE,
        S.GENDER AS STUDENT_GENDER,
        CONCAT(ADR.STREET||', '||ADR.CITY||', '||ADR.STATE||', '||ADR.COUNTRY) AS ADDRESS
FROM PARENTS P 
JOIN STUDENT_PARENT SP ON P.IN = SP.PARENT_ID
JOIN STUDENTS S ON S.IN = SP.STUDENT_ID
JOIN ADDRESS ADR ON P.ADDRESS_ID = ADR.ADDRESS_ID
WHERE P.ID IN (SELECT PARENT_ID
				FROM STUDENT_PARETN SP
                GROUP BY PARENT_ID
                HAVING COUNT(1) >1)
ORDER BY 1;                
        
-- AGGREGATE FUNCTIONS ( AVG, MIN, MAX, SUM, COUNT): Aggregate function are used to preform calcualtion on a set of values.


USE SCHOOL_DETAIL;
-- AVG:- FINDING STAFF sALARY W.R.T STAFF TYPE
SELECT * FROM STAFF_SALARY;
SELECT * FROM STAFF;
SELECT AVG(SALARY) FROM STAFF_SALARY;

-- FINAL ANSWER:- 
		SELECT  STF.STAFF_TYPE, CONCAT("$ ",ROUND(AVG(SS.SALARY), 2)) AS "AVERAGE SALARY"
		FROM STAFF_SALARY SS 
		JOIN STAFF STF ON STF.STAFF_ID = SS.STAFF_ID
		GROUP BY STF.STAFF_TYPE;

-- SUM :- FINDING SUM OF SALARY W.R.T. STAFF TYPE
-- FINAL QUERY
		SELECT STF.STAFF_TYPE, CONCAT("$ ",ROUND(SUM(SS.SALARY), 2)) AS "TOTAL SALARY" 
		FROM STAFF_SALARY SS
		JOIN STAFF STF ON STF.STAFF_ID = SS.STAFF_ID
		GROUP BY STF.STAFF_TYPE;        

-- MINIMUM SALARY:- 
		SELECT STF.STAFF_TYPE, CONCAT("$ ",MIN(SS.SALARY), 2) AS "TOTAL SALARY" 
		FROM STAFF_SALARY SS
		JOIN STAFF STF ON STF.STAFF_ID = SS.STAFF_ID
		GROUP BY STF.STAFF_TYPE;   
        
-- MAXIMUM SALARY:-
        SELECT STF.STAFF_TYPE, CONCAT("$ ",MAX(SS.SALARY), 2) AS "TOTAL SALARY" 
		FROM STAFF_SALARY SS
		JOIN STAFF STF ON STF.STAFF_ID = SS.STAFF_ID
		GROUP BY STF.STAFF_TYPE;  
        
SELECT * FROM STAFF_SALARY WHERE SALARY = (SELECT MAX(SALARY) FROM STAFF_SALARY) GROUP BY STAFF_TYPE; 
SELECT * FROM STAFF_SALARY WHERE SALARY = (SELECT MAX(SALARY) FROM STAFF_SALARY);

-- FINAL RESULT :- USING TYHIS QUERY WE ARE TRYING TO FIND OUT THE NAME OF THE EMPLOYEE WHO HAVE MAXIMUM SALARY
		SELECT STF.STAFF_TYPE, CONCAT(FIRST_NAME," ",LAST_NAME) AS FULL_NAME, SS.SALARY
		FROM STAFF STF
		JOIN STAFF_SALARY SS ON STF.STAFF_ID = SS.STAFF_ID
		JOIN(SELECT STF.STAFF_TYPE , MAX(SS.SALARY) AS MAX_SALARY
			FROM STAFF_SALARY SS
			JOIN STAFF STF ON STF.STAFF_ID = SS.STAFF_ID
			GROUP BY STF.STAFF_TYPE
			) AS MAX_SALARY_TABLE
		ON MAX_SALARY_TABLE.STAFF_TYPE = STF.STAFF_TYPE AND MAX_SALARY_TABLE.MAX_SALARY = SS.SALARY;
        
-- FINAL RESULT :- USING TYHIS QUERY WE ARE TRYING TO FIND OUT THE NAME OF THE EMPLOYEE WHO HAVE MINIMUM SALARY
		SELECT STF.STAFF_TYPE, CONCAT(FIRST_NAME," ",LAST_NAME) AS FULL_NAME, SS.SALARY
		FROM STAFF STF
		JOIN STAFF_SALARY SS ON STF.STAFF_ID = SS.STAFF_ID
		JOIN(SELECT STF.STAFF_TYPE , MIN(SS.SALARY) AS MAX_SALARY
			FROM STAFF_SALARY SS
			JOIN STAFF STF ON STF.STAFF_ID = SS.STAFF_ID
			GROUP BY STF.STAFF_TYPE
			) AS MIN_SALARY_TABLE
		ON MIN_SALARY_TABLE.STAFF_TYPE = STF.STAFF_TYPE AND MIN_SALARY_TABLE.MAX_SALARY = SS.SALARY;        
        
        
/*        
 SQL JOINS: There are several type of joins but we look at the most commonly used joins taht are:-
    1) INNER JOIN:-
		- Inner join featches records when there are matching values in both tables
    2)  OUTER JOIN:-
		 a) LEFT OUTER JOIN:-
				- Left join fetch all the record from left table and match records with right table.
                - The count of the query will be the count if the left table.
                - columns which are fetched from right table and do not have a match will be passed as NULL.
                
         b) RIGHT OUTER JOIN:-
				- Right join fetch all the record from right table and match records with left table.
                - The count of the query will be the count if the right table.
				- columns which are fetched from left table and do not have a match will be passed as NULL.
         c) FULL OUTER JOIN:-
				- full join always return the mathcing and non-mathcing records from both left and right table.
*/        

-- 1. INNER JOIN :-
SELECT * FROM STAFF; -- 23 : 21 MATCH WITH STAFF_SALARY
SELECT * FROM STAFF_SALARY; -- 23 : 21 MATCH WITH STAFF_SALARY

-- Fetch all staff matching and salary info

SELECT COUNT(1)
FROM STAFF STF
JOIN STAFF_SALARY SS ON STF.STAFF_ID = SS.STAFF_ID; -- 21

SELECT CONCAT(FIRST_NAME, " ", LAST_NAME) AS FULL_NAME, SS.SALARY
FROM STAFF STF
JOIN STAFF_SALARY SS ON SS.STAFF_ID = STF.STAFF_ID; -- From this we get that this queury is generating just the matching instances.

-- LEFT JOIN :-
SELECT * FROM STAFF; -- 23 : 23 SHOW ALL INSTANCES
SELECT * FROM STAFF_SALARY; -- 24 : 21 EXTRA 2 UNMATCH INSTANCES

SELECT COUNT(1)
FROM STAFF STF
LEFT JOIN STAFF_SALARY SS ON STF.STAFF_ID = SS.STAFF_ID; -- 23

SELECT CONCAT(FIRST_NAME, " ", LAST_NAME) AS FULL_NAME, SS.SALARY
FROM STAFF STF
LEFT JOIN STAFF_SALARY SS ON SS.STAFF_ID = STF.STAFF_ID; -- From this we get that this queury is generating just the matching instances.

SELECT TABLESS.FULL_NAME
FROM (SELECT CONCAT(FIRST_NAME, " ", LAST_NAME) AS FULL_NAME, SS.SALARY
	FROM STAFF STF
	LEFT JOIN STAFF_SALARY SS ON SS.STAFF_ID = STF.STAFF_ID
) AS TABLESS
WHERE TABLESS.SALARY IS NULL; -- using this we will get all the extra instances which not match with right table.


-- RIGHT JOIN :-
SELECT * FROM STAFF; -- 23 : 21 EXTRA 3 UNMATCH INSTANCES
SELECT * FROM STAFF_SALARY; -- 24 : 24 SHOW ALL INSTANCES

SELECT COUNT(1)
FROM STAFF STF
RIGHT JOIN STAFF_SALARY SS ON STF.STAFF_ID = SS.STAFF_ID; -- 24

SELECT CONCAT(FIRST_NAME, " ", LAST_NAME) AS FULL_NAME, SS.SALARY
FROM STAFF STF
RIGHT JOIN STAFF_SALARY SS ON SS.STAFF_ID = STF.STAFF_ID; -- From this we get that this queury is generating just the matching instances.

SELECT TABLESS.FULL_NAME, TABLESS.SALARY
FROM (SELECT CONCAT(FIRST_NAME, " ", LAST_NAME) AS FULL_NAME, SS.SALARY
	FROM STAFF STF
	RIGHT JOIN STAFF_SALARY SS ON SS.STAFF_ID = STF.STAFF_ID
) AS TABLESS
WHERE TABLESS.FULL_NAME IS NULL; -- using this we will get all the extra instances which not match with right table.


-- FULL OUTER JOIN :-
SELECT * FROM STAFF; -- 23 : 21 EXTRA 3 UNMATCH INSTANCES
SELECT * FROM STAFF_SALARY; -- 24 : 24 SHOW ALL INSTANCES

SELECT COUNT(1)
FROM (
    SELECT STF.STAFF_ID, SS.STAFF_ID AS SALARY_STAFF_ID
    FROM STAFF STF
    LEFT JOIN STAFF_SALARY SS ON STF.STAFF_ID = SS.STAFF_ID
    UNION
    SELECT STF.STAFF_ID, SS.STAFF_ID AS SALARY_STAFF_ID
    FROM STAFF_SALARY SS
    LEFT JOIN STAFF STF ON SS.STAFF_ID = STF.STAFF_ID
) AS FULL_JOIN_RESULT;


